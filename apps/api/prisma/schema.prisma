// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  OWNER
  MAINTAINER
  REVIEWER
}

enum Language {
  JAVASCRIPT
  PYTHON
  JAVA
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  projects     Project[] @relation("OwnedProjects")
  memberships  ProjectMember[] @relation("ProjectMemberships")
  versions     Version[] @relation("VersionAuthors")
  comments     Comment[] @relation("UserComments")

  @@index([email])
}

model Project {
  id          Int      @id @default(autoincrement())

  ownerId     Int
  owner       User     @relation("OwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name        String

  description String?
  language    String
  code        String   

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  members     ProjectMember[]
  versions    Version[]
}

model ProjectMember {
  id           Int        @id @default(autoincrement())
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId    Int
  user         User       @relation("ProjectMemberships", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int
  role         MemberRole @default(REVIEWER)

  @@unique([projectId, userId])

  @@index([userId])
  @@index([projectId])
}

model Version {
  id           Int        @id @default(autoincrement())
  projectId    Int
  project      Project    @relation(fields:[projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  language     String
  code         String

  author       User       @relation("VersionAuthors", fields: [authorId], references: [id])
  authorId     Int
  // going to have to change this later so that created doesn't get updated on each call
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  comments     Comment[]  @relation("VersionComments")

  @@index([projectId])
  @@index([authorId])
}

model Comment {
  id           Int        @id @default(autoincrement())
  versionId    Int
  version      Version    @relation("VersionComments", fields:[versionId], references: [id], onDelete: Cascade)

  line         Int
  content      String?     

  authorId     Int
  author       User       @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  parentId     Int?
  parent       Comment?   @relation("CommentThread", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children     Comment[]  @relation("CommentThread")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@index([versionId])
  @@index([authorId])
  @@index([parentId])
  @@index([line])
}